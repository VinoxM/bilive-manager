# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'BarrageWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import math
import webbrowser

from PyQt5 import QtCore, QtGui, QtWidgets

from api.apiThread import RunThread
from components import Style
from components.DraggableWidget import DraggableWidget, DraggableLabel
import icon
from components.ClickableLabel import ClickableLabel
from components.AvatarLabel import AvatarLabel


class UiBarrageWindow(QtWidgets.QWidget):
    _signal_get_user_detail = QtCore.pyqtSignal(int)
    _signal_update_barrage_visible = QtCore.pyqtSignal(int)

    def __init__(self):
        super(UiBarrageWindow, self).__init__()
        self.uid = 0
        self.window = None
        self.width_ = 400
        self.height_ = 900
        self.live_link = None
        self.on_top = True
        # get user detail
        self.thread = QtCore.QThread(self)
        self.thread_get_user_detail = RunThread('get_user_detail')
        self.thread_get_user_detail.moveToThread(self.thread)
        self._signal_get_user_detail.connect(self.thread_get_user_detail.run)
        self.thread_get_user_detail.signal.connect(self.call_get_user_detail)

    def setupUi(self, window):
        self.window = window
        window.setObjectName("window")
        window.setFixedSize(self.width_, self.height_)
        window.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.Tool | QtCore.Qt.WindowStaysOnTopHint)
        window.setAttribute(QtCore.Qt.WA_TranslucentBackground, True)
        pixMap = QtGui.QPixmap()
        pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.disconnected))
        window.setWindowIcon(QtGui.QIcon(pixMap))
        window.setWindowTitle('弹幕姬 [未连接]')

        # Window Frame
        self.widget = QtWidgets.QWidget(window)
        self.widget.setGeometry(QtCore.QRect(0, 0, self.width_, 40))
        self.widget.setObjectName("widget")
        self.widget.setStyleSheet("#widget{background-color: rgba(0,0,0,0.4);}")

        # Drag Handler
        self.drag = DraggableWidget(self.widget)
        self.drag.setGeometry(QtCore.QRect(0, 0, 370, 40))
        self.drag.drag_move.connect(self.drag_move)
        # Close Button
        self.close_btn = ClickableLabel(self.widget)
        self.close_btn.setGeometry(QtCore.QRect(370, 10, 20, 20))
        self.close_btn.setText('✕')
        self.close_btn.setAlignment(QtCore.Qt.AlignCenter)
        self.close_btn.setCursor(QtCore.Qt.PointingHandCursor)
        self.close_btn.setObjectName('close-btn')
        self.close_btn.setStyleSheet("#close-btn{color:white ;font-size: 16px;}#close-btn:hover{color: #13A4DF}")
        self.close_btn.clicked.connect(self.window.close)
        # Avatar
        self.avatar = AvatarLabel(self.widget)
        self.avatar.setGeometry(QtCore.QRect(2, 2, 36, 36))
        pixMap = QtGui.QPixmap()
        pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.no_face))
        self.avatar.setup_image(size_=36, img_=pixMap.scaled(36, 36))
        self.avatar.clicked.connect(self.open_url)
        self.avatar.setCursor(QtCore.Qt.PointingHandCursor)
        # Status
        self.status = QtWidgets.QLabel(self.widget)
        self.status.setGeometry(QtCore.QRect(40, 13, 14, 14))
        self.status.setAlignment(QtCore.Qt.AlignCenter)
        self.status.setObjectName('status')
        self.status.setText('●')
        self.status.setStyleSheet("color: red")
        # Title
        self.title = DraggableLabel(self.widget)
        self.title.drag_move.connect(self.drag_move)
        self.title.setGeometry(QtCore.QRect(50, 5, 220, 30))
        self.title.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.title.setObjectName('title')
        self.title.setStyleSheet("#title{font-size: 12px; color: white;font-weight: bold; padding-left: 5px}")
        # Pop
        self.popular_icon = AvatarLabel(self.widget)
        self.popular_icon.setGeometry(QtCore.QRect(274, 12, 16, 16))
        pixMap = QtGui.QPixmap()
        pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.hot))
        self.popular_icon.setup_image(16, pixMap.scaled(16, 16))
        self.pop = QtWidgets.QLabel(self.widget)
        self.pop.setGeometry(QtCore.QRect(290, 5, 50, 30))
        self.pop.setObjectName('pop')
        self.pop.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
        self.pop.setStyleSheet('#pop{font-size:12px; color: white; padding: 5px 0px;font-family: "微软雅黑", sans-serif;}')
        self.pop.setToolTip("人气")
        self.pop.setText("0")
        # On Top
        self.top = AvatarLabel(self.widget)
        self.top.setGeometry(QtCore.QRect(345, 10, 20, 20))
        pixMap = QtGui.QPixmap()
        pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.top))
        self.top.setup_image(20, pixMap.scaled(20, 20))
        self.top.clicked.connect(self.toggle_top)
        self.top.setCursor(QtCore.Qt.PointingHandCursor)

        self.barrage_area = QtWidgets.QScrollArea(window)
        self.barrage_area.setGeometry(QtCore.QRect(0, 40, 400, 700))
        self.barrage_area.setObjectName("scrollArea")
        self.barrage_area.setWidgetResizable(True)

        self.barrage = QtWidgets.QWidget(window)
        self.barrage.setObjectName("barrage")
        self.barrage.setStyleSheet("#barrage{padding: 3px 2px 3px 2px;}")
        self.barrage.setFixedSize(394, 10)
        self.barrage.setAttribute(QtCore.Qt.WA_TranslucentBackground)

        self.barrage_layout = QtWidgets.QVBoxLayout()
        self.barrage_layout.setAlignment(QtCore.Qt.AlignTop)
        self.barrage_layout.setSpacing(5)
        self.barrage.setLayout(self.barrage_layout)

        self.barrage_area.setWidget(self.barrage)
        self.barrage_area.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        # self.barrage_area.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.barrage_area.setStyleSheet(Style.scroll_bar_style('border: 0px;background-color: rgba(0,0,0,0.5);'))

        self.split_ = QtWidgets.QWidget(window)
        self.split_.setGeometry(QtCore.QRect(0, 740, 400, 20))
        self.split_.setObjectName("split")
        self.split_.setStyleSheet("#split{background-color: rgba(0,0,0,0.6);}")

        self.gift_label = ClickableLabel(self.split_)
        self.gift_label.setObjectName('gift-label')
        self.gift_label.setText('<span style="color: white">礼物信息</span>')
        self.gift_label.setStyleSheet('#gift-label{font-family: "微软雅黑", sans-serif;}')
        self.gift_label.clicked.connect(self.show_gift)
        self.gift_label.setCursor(QtCore.Qt.PointingHandCursor)
        self.gift_label.setGeometry(QtCore.QRect(110, 0, 60, 20))
        self.gift_label.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.gift_label.setAlignment(QtCore.Qt.AlignCenter)

        self.join_label = ClickableLabel(self.split_)
        self.join_label.setObjectName('join-label')
        self.join_label.setText('<span style="color: #0ebeff"><u>进场信息</u></span>')
        self.join_label.setStyleSheet('#join-label{font-family: "微软雅黑", sans-serif;}')
        self.join_label.clicked.connect(self.show_join)
        self.join_label.setCursor(QtCore.Qt.PointingHandCursor)
        self.join_label.setGeometry(QtCore.QRect(230, 0, 60, 20))
        self.join_label.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.join_label.setAlignment(QtCore.Qt.AlignCenter)

        self.gift = QtWidgets.QWidget()
        self.gift.setObjectName("barrage")
        self.gift.setStyleSheet("#barrage{padding: 3px 2px 3px 2px;}")
        self.gift.setAttribute(QtCore.Qt.WA_TranslucentBackground)

        self.gift_area = QtWidgets.QScrollArea(window)
        self.gift_area.setGeometry(QtCore.QRect(0, 760, 400, 140))
        self.gift_area.setObjectName("scrollArea")

        self.gift_layout = QtWidgets.QVBoxLayout()
        self.gift_layout.setAlignment(QtCore.Qt.AlignTop)
        self.gift_layout.setSpacing(5)
        self.gift.setLayout(self.gift_layout)

        self.gift_area.setWidget(self.gift)
        self.gift_area.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        # self.other_area.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.gift_area.setStyleSheet(Style.scroll_bar_style('border: 0px;background-color: rgba(0,0,0,0.5);'))

        self.join = QtWidgets.QWidget()
        self.join.setObjectName("barrage")
        self.join.setStyleSheet("#barrage{padding: 3px 2px 3px 2px;}")
        self.join.setAttribute(QtCore.Qt.WA_TranslucentBackground)

        self.join_area = QtWidgets.QScrollArea(window)
        self.join_area.setGeometry(QtCore.QRect(0, 760, 400, 140))
        self.join_area.setObjectName("scrollArea")

        self.join_layout = QtWidgets.QVBoxLayout()
        self.join_layout.setAlignment(QtCore.Qt.AlignTop)
        self.join_layout.setSpacing(5)
        self.join.setLayout(self.join_layout)

        self.join_area.setWidget(self.join)
        self.join_area.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        # self.other_area.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.join_area.setStyleSheet(Style.scroll_bar_style('border: 0px;background-color: rgba(0,0,0,0.5);'))
        self.join_area.hide()

        QtCore.QMetaObject.connectSlotsByName(window)

    def toggle_barrage_status(self, status):
        pixMap = QtGui.QPixmap()
        pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.connected if status == 1 else icon.disconnected))
        self.window.setWindowIcon(QtGui.QIcon(pixMap))
        self.window.setWindowTitle('弹幕姬 [已连接]' if status == 1 else '弹幕姬 [未连接]')

    def _toggle(self):
        if self.window.isVisible():
            self.window.close()
            self._signal_update_barrage_visible.emit(0)
        else:
            self.window.show()
            self.window.activateWindow()
            self._signal_update_barrage_visible.emit(1)

    def drag_move(self, x, y):
        desktop = QtWidgets.QApplication.desktop()
        width = desktop.width()
        height = desktop.height()
        if x < 0:
            x = 0
        elif x > width - self.width_:
            x = width - self.width_
        if y < 0:
            y = 0
        elif y > height - self.height_:
            y = height - self.height_
        self.window.move(x, y)

    def add_barrage(self, dm_info):
        uid = dm_info['uid']
        uname = dm_info['uname']
        message = dm_info['msg']
        is_host = uid == self.uid
        str_ = '' if not is_host else '<span style="color: white;">主 </span>'
        str_ += '<span style="font-weight: bold;color: #ADBCD9">{}: </span><span style="color:white;">'.format(uname)
        str_end = '{}<br>'
        row_height = 24  # 行高
        row_space = 3  # 行距
        item_space = 5  # 弹幕间距
        scroll_bar = self.barrage_area.verticalScrollBar()
        is_on_bottom = scroll_bar.value() == scroll_bar.maximum()
        len_uname = len(uname) + 2 if is_host else 0
        len_ = len(message) + len_uname
        max_len = 30
        row_num = math.ceil(len_ / max_len)
        for i in range(row_num):
            str_ += str_end.format(message[i * max_len:(i + 1) * max_len - (0 if i != 0 else len_uname)])
        str_ += '</span>'
        label = QtWidgets.QLabel()
        label.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)
        label.setAlignment(QtCore.Qt.AlignVCenter)
        label.setText(str_)
        label.setStyleSheet('font-size:14px;font-family: "微软雅黑", sans-serif;line-height: 20px;')
        height = row_num * row_height + (row_num - 1) * row_space
        label.setFixedSize(380, height)
        label.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.barrage_layout.addWidget(label)
        if self.barrage_layout.count() > 100:
            label_ = self.barrage_layout.takeAt(0)
            height -= label_.widget().size().height() + item_space
            label_.widget().deleteLater()
        self.barrage.setFixedSize(380, self.barrage.size().height() + height + item_space)
        if self.barrage.size().height() > 690:
            scroll_bar = self.barrage_area.verticalScrollBar()
            if is_on_bottom:
                scroll_bar.setValue(scroll_bar.maximum())

    def add_join(self, obj):
        uname = obj['uname']
        is_welcome = obj['welcome']
        message = '{} 用户 <span style="font-weight: bold;color: #ADBCD9">{}</span> 进入直播间'.format(
            '' if not is_welcome else '欢迎', uname)
        scroll_bar = self.join_area.verticalScrollBar()
        is_on_bottom = scroll_bar.value() == scroll_bar.maximum()
        label = QtWidgets.QLabel()
        label.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)
        label.setAlignment(QtCore.Qt.AlignVCenter)
        label.setText(message)
        label.setStyleSheet('color: white;font-size:12px;font-family: "微软雅黑", sans-serif;line-height: 20px;')
        label.setFixedSize(380, 20)
        label.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.join_layout.addWidget(label)
        height = 20 + 4
        if self.join_layout.count() > 40:
            label_ = self.join_layout.takeAt(0)
            height -= label_.widget().size().height() + 4
            label_.widget().deleteLater()
        self.join.setFixedSize(380, self.join.size().height() + height)
        if self.join.size().height() > 130:
            scroll_bar = self.join_area.verticalScrollBar()
            if is_on_bottom:
                scroll_bar.setValue(scroll_bar.maximum())

    def add_gift(self, obj):
        uname = obj['uname']
        action_ = obj['action']
        num_ = obj['num']
        gift_name = obj['gift_name']
        message = '<span style="font-weight: bold;color: #ADBCD9">{}</span> ' \
                  '{} 了 {} 个 <span style="font-weight: bold;color: #ADBCD9">' \
                  '{}</span>'.format(uname, action_, num_, gift_name)
        scroll_bar = self.gift_area.verticalScrollBar()
        is_on_bottom = scroll_bar.value() == scroll_bar.maximum()
        label = QtWidgets.QLabel()
        label.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)
        label.setAlignment(QtCore.Qt.AlignVCenter)
        label.setText(message)
        label.setStyleSheet('color: white;font-size:12px;font-family: "微软雅黑", sans-serif;line-height: 20px;')
        label.setFixedSize(380, 20)
        label.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.gift_layout.addWidget(label)
        height = 20 + 4
        if self.gift_layout.count() > 40:
            label_ = self.gift_layout.takeAt(0)
            height -= label_.widget().size().height() + 4
            label_.widget().deleteLater()
        self.gift.setFixedSize(380, self.gift.size().height() + height)
        if self.gift.size().height() > 130:
            scroll_bar = self.gift_area.verticalScrollBar()
            if is_on_bottom:
                scroll_bar.setValue(scroll_bar.maximum())

    def call_get_user_detail(self, obj):
        if obj.get('err', '') == '':
            face = obj.get('face', None)
            self.live_link = obj.get('link')
            if face is None:
                pixMap = QtGui.QPixmap()
                pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.no_face))
                self.avatar.setup_image(size_=36, img_=pixMap.scaled(36, 36))
            else:
                img = QtGui.QImage.fromData(face)
                avatar = QtGui.QPixmap.fromImage(img)
                self.avatar.setup_image(size_=36,
                                        img_=avatar.scaled(36, 36, transformMode=QtCore.Qt.SmoothTransformation))
            self.avatar.setToolTip(obj.get('uname', ''))

    def update_live_info(self, obj):
        self.init_all_message()
        title = obj.get('title', '')
        status = obj.get('status', '')
        self.status.setStyleSheet("color: {}".format("#59A869" if status == 1 else "#F0F0F0"))
        uid = obj.get('uid', 0)
        self.uid = uid
        self.title.setText(title)
        if not self.thread.isRunning():
            self.thread.start()
        self._signal_get_user_detail.emit(uid)
        self.toggle_barrage_status(1)

    def update_heartbeat(self, num_):
        str_ = str(num_)
        if num_ > 10000:
            str_ = str(round(num_ / 10000, 1)) + '万'
        self.pop.setText(str_)
        self.pop.setToolTip(str(num_))

    def show_gift(self):
        self.gift_label.setText('<span style="color: white">礼物信息</span>')
        self.join_label.setText('<span style="color: #0ebeff"><u>进场信息</u></span>')
        self.gift_area.show()
        scroll_bar = self.gift_area.verticalScrollBar()
        scroll_bar.setValue(scroll_bar.maximum())
        self.join_area.hide()

    def show_join(self):
        self.gift_label.setText('<span style="color: #0ebeff"><u>礼物信息</u></span>')
        self.join_label.setText('<span style="color: white">进场信息</span>')
        self.gift_area.hide()
        self.join_area.show()
        scroll_bar = self.join_area.verticalScrollBar()
        scroll_bar.setValue(scroll_bar.maximum())

    def init_all_message(self):
        self.live_link = None
        self.barrage.setFixedSize(380, 0)
        self.gift.setFixedSize(380, 0)
        self.join.setFixedSize(380, 0)
        for i in range(self.barrage_layout.count()):
            self.barrage_layout.itemAt(i).widget().deleteLater()
        for i in range(self.gift_layout.count()):
            self.gift_layout.itemAt(i).widget().deleteLater()
        for i in range(self.join_layout.count()):
            self.join_layout.itemAt(i).widget().deleteLater()

    def open_url(self):
        if self.live_link:
            webbrowser.open(self.live_link)

    def ws_closed(self):
        self.status.setStyleSheet("color: red")
        self.toggle_barrage_status(0)

    def toggle_top(self):
        pixMap = QtGui.QPixmap()
        pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.on_top if self.on_top else icon.top))
        self.top.setup_image(20, pixMap.scaled(20, 20))
        self.on_top = False if self.on_top else True
        if self.on_top:
            self.window.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.Tool | QtCore.Qt.WindowStaysOnTopHint)
        else:
            self.window.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.Tool)
        self.window.show()
        self.window.activateWindow()
