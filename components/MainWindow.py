# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from components.ClickableLabel import ClickableLabel
from components.ChangeableTextEdit import ChangeableTextEdit
from components.AvatarLabel import AvatarLabel

from PyQt5 import QtCore, QtGui, QtWidgets
import webbrowser
import components.Style as Style
from api.apiThread import RunThread
import icon
from configparser import RawConfigParser
import os
import math
from sockets.Socket_ import SocketWidget


def change_stat_num(count):
    if type(count) == str:
        return count
    return '{}w'.format(int(count / 1000)) if count > 10000 else str(count)


def init_conf(cf):
    cf.add_section('user_info')
    cf.set("user_info", "uid", '')
    cf.set("user_info", "token", '')
    cf.set("user_info", "cookie", '')

    with open("config.ini", "w+") as f:
        cf.write(f)


class UiMainWindow(QtWidgets.QWidget):
    _signal_get_live_area = QtCore.pyqtSignal()
    _signal_get_user_info = QtCore.pyqtSignal(str, str)
    _signal_get_user_stat = QtCore.pyqtSignal(str, str)
    _signal_get_live_info = QtCore.pyqtSignal(str)
    _signal_get_live_rtmp = QtCore.pyqtSignal(int, str)
    _signal_update_live_title = QtCore.pyqtSignal(int, str, str, str)
    _signal_update_live_area = QtCore.pyqtSignal(int, int, str, str)
    _signal_update_live_status = QtCore.pyqtSignal(int, int, int, str, str)
    _signal_get_real_room_id = QtCore.pyqtSignal(str, str)
    _signal_get_last_barrage = QtCore.pyqtSignal(str)

    _signal_bili_ws_connect = QtCore.pyqtSignal(str)
    _signal_bili_ws_disconnect = QtCore.pyqtSignal()
    _signal_send_bili_barrage = QtCore.pyqtSignal(str, str, str, str)
    _signal_bili_ws_receive = QtCore.pyqtSignal(object)
    _signal_bili_ws_pop = QtCore.pyqtSignal(int)
    _signal_bili_ws_join = QtCore.pyqtSignal(object)
    _signal_bili_ws_gift = QtCore.pyqtSignal(object)
    _signal_bili_ws_close = QtCore.pyqtSignal()
    _signal_bili_ws_update = QtCore.pyqtSignal(object)

    _signal_open_setting_window = QtCore.pyqtSignal(str, str, str)
    _signal_toggle_barrage_window = QtCore.pyqtSignal()

    _signal_update_sys_tray_live_status = QtCore.pyqtSignal(int)
    _signal_update_sys_tray_ws_connect = QtCore.pyqtSignal(int)

    def __init__(self):
        super(UiMainWindow, self).__init__()

        # properties
        self.live_area = {}
        self.room_id = {}
        self.live_status = 0
        self.area_id = 0
        self.live_title = ''
        self.live_rtmp = {}
        self.log_msg = []
        self.logs = None
        self.ws_status = 0
        self.minimized = 1

        # init config.ini
        cf = RawConfigParser()
        if os.path.exists('config.ini'):
            cf.read('config.ini', encoding='gbk')
        else:
            self.print_log('生成默认配置文件')
            init_conf(cf)
        self.uid = cf['user_info']['uid']
        self.token = cf['user_info']['token']
        self.cookie = cf['user_info']['cookie']

        """ thread handler 多线程操作,防止界面卡住 """
        self.thread = QtCore.QThread(self)
        # get live area
        self.thread_get_live_area = RunThread('get_live_area')
        self.thread_get_live_area.moveToThread(self.thread)
        self._signal_get_live_area.connect(self.thread_get_live_area.run)
        self.thread_get_live_area.signal.connect(self.init_live_area)
        # get user info
        self.thread_get_user_info = RunThread('get_user_info_by_cookie')
        self.thread_get_user_info.moveToThread(self.thread)
        self._signal_get_user_info.connect(self.thread_get_user_info.run)
        self.thread_get_user_info.signal.connect(self.update_user_info)
        # get user stat
        self.thread_get_user_stat = RunThread('get_user_stat_by_cookie')
        self.thread_get_user_stat.moveToThread(self.thread)
        self._signal_get_user_stat.connect(self.thread_get_user_stat.run)
        self.thread_get_user_stat.signal.connect(self.update_user_stat)
        # get live info
        self.thread_get_live_info = RunThread('get_live_info_by_cookie')
        self.thread_get_live_info.moveToThread(self.thread)
        self._signal_get_live_info.connect(self.thread_get_live_info.run)
        self.thread_get_live_info.signal.connect(self.update_live_info)
        # get live rtmp
        self.thread_get_live_rtmp = RunThread('get_live_rtmp_by_cookie')
        self.thread_get_live_rtmp.moveToThread(self.thread)
        self._signal_get_live_rtmp.connect(self.thread_get_live_rtmp.run)
        self.thread_get_live_rtmp.signal.connect(self.update_live_rtmp)
        # update live title
        self.thread_update_live_title = RunThread('update_live_title')
        self.thread_update_live_title.moveToThread(self.thread)
        self._signal_update_live_title.connect(self.thread_update_live_title.run)
        self.thread_update_live_title.signal.connect(self.call_live_title)
        # update live area
        self.thread_update_live_area = RunThread('update_live_area')
        self.thread_update_live_area.moveToThread(self.thread)
        self._signal_update_live_area.connect(self.thread_update_live_area.run)
        self.thread_update_live_area.signal.connect(self.call_live_area)
        # update live status
        self.thread_update_live_status = RunThread('update_live_status')
        self.thread_update_live_status.moveToThread(self.thread)
        self._signal_update_live_status.connect(self.thread_update_live_status.run)
        self.thread_update_live_status.signal.connect(self.call_live_status)
        # send bili barrage
        self.thread_send_bili_barrage = RunThread('send_bili_barrage')
        self.thread_send_bili_barrage.moveToThread(self.thread)
        self._signal_send_bili_barrage.connect(self.thread_send_bili_barrage.run)
        self.thread_send_bili_barrage.signal.connect(self.call_send_barrage_msg)
        # get real roomId
        self.thread_get_real_room_id = RunThread('get_real_room_id')
        self.thread_get_real_room_id.moveToThread(self.thread)
        self._signal_get_real_room_id.connect(self.thread_get_real_room_id.run)
        self.thread_get_real_room_id.signal.connect(self.call_real_room_id)
        # connect bili ws
        self.thread_bili_ws = SocketWidget()
        self.thread_bili_ws.moveToThread(self.thread)
        self._signal_bili_ws_connect.connect(self.thread_bili_ws.connect_ws)
        self._signal_bili_ws_disconnect.connect(self.thread_bili_ws.close_ws)
        self.thread_bili_ws.open.connect(self.call_bili_ws_open)
        self.thread_bili_ws.close.connect(self.call_bili_ws_close)
        # receive ws message
        self.thread_bili_ws.join.connect(self.call_bili_ws_join)
        self.thread_bili_ws.pop.connect(self.call_bili_ws_pop)
        self.thread_bili_ws.gift.connect(self.call_bili_ws_gift)
        self.thread_bili_ws.receive.connect(self.call_bili_ws_receive)
        # get last ten barrage
        self.thread_get_last_barrage = RunThread('get_last_ten_message')
        self.thread_get_last_barrage.moveToThread(self.thread)
        self._signal_get_last_barrage.connect(self.thread_get_last_barrage.run)
        self.thread_get_last_barrage.signal.connect(self.call_get_last_barrage)

    def setupUi(self, main_window):
        """ main window """
        main_window.setObjectName("MainWindow")
        main_window.setWindowModality(QtCore.Qt.NonModal)
        main_window.setEnabled(True)
        main_window.setFixedSize(500, 400)
        pixMap = QtGui.QPixmap()
        pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.icon_stop))
        main_window.setWindowIcon(QtGui.QIcon(pixMap))
        self.main_window = main_window

        """ user info """
        self.centralwidget = QtWidgets.QWidget(main_window)
        self.centralwidget.setObjectName("centralwidget")
        self.userinfo = QtWidgets.QWidget(self.centralwidget)
        self.userinfo.setGeometry(QtCore.QRect(2, 2, 246, 76))
        self.userinfo.setStyleSheet('font-family: "微软雅黑", sans-serif;')
        user_border = QtWidgets.QWidget(self.userinfo)
        user_border.setObjectName("userinfo")
        user_border.setGeometry(QtCore.QRect(0, 0, 246, 76))
        user_border.setStyleSheet(Style.border_style_("userinfo"))
        # avatar
        self.avatar = AvatarLabel(self.userinfo)
        self.avatar.setGeometry(QtCore.QRect(3, 2, 72, 72))
        self.avatar.setObjectName("avatar")
        pixMap = QtGui.QPixmap()
        pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.no_face))
        self.avatar.setup_image(size_=72, img_=pixMap.scaled(72, 72))
        # user name
        self.user_name = QtWidgets.QLabel(self.userinfo)
        self.user_name.setGeometry(QtCore.QRect(78, 3, 105, 20))
        self.user_name.setObjectName("user_name")
        # user level
        self.level = QtWidgets.QLabel(self.userinfo)
        self.level.setGeometry(QtCore.QRect(188, 3, 50, 20))
        self.level.setAlignment(QtCore.Qt.AlignCenter)
        self.level.setObjectName("level")
        # user follow
        self.label_6 = QtWidgets.QLabel(self.userinfo)
        self.label_6.setGeometry(QtCore.QRect(78, 28, 35, 20))
        self.label_6.setObjectName("label_6")
        self.follow = QtWidgets.QLabel(self.userinfo)
        self.follow.setGeometry(QtCore.QRect(118, 28, 40, 20))
        self.follow.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.follow.setObjectName("follow")
        # user follower
        self.label_8 = QtWidgets.QLabel(self.userinfo)
        self.label_8.setGeometry(QtCore.QRect(168, 28, 35, 20))
        self.label_8.setObjectName("label_8")
        self.fans = QtWidgets.QLabel(self.userinfo)
        self.fans.setGeometry(QtCore.QRect(198, 28, 40, 20))
        self.fans.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.fans.setObjectName("fans")
        # setting
        self.setting = QtWidgets.QPushButton(self.userinfo)
        self.setting.setGeometry(QtCore.QRect(78, 50, 40, 24))
        self.setting.setObjectName("setting")
        self.setting.setCursor(QtCore.Qt.PointingHandCursor)
        self.setting.setStyleSheet(Style.button_style('setting'))
        self.setting.clicked.connect(self.open_setting_window)
        # refresh
        self.refresh = QtWidgets.QPushButton(self.userinfo)
        self.refresh.setGeometry(QtCore.QRect(128, 50, 40, 24))
        self.refresh.setObjectName("refresh")
        self.refresh.setCursor(QtCore.Qt.PointingHandCursor)
        self.refresh.setStyleSheet(Style.button_style('refresh'))
        self.refresh.clicked.connect(self.refresh_info)

        """ live info """
        self.live = QtWidgets.QWidget(self.centralwidget)
        self.live.setGeometry(QtCore.QRect(2, 80, 246, 192))
        self.live.setStyleSheet('font-family: "微软雅黑", sans-serif;')
        live_border = QtWidgets.QWidget(self.live)
        live_border.setObjectName("live")
        live_border.setGeometry(QtCore.QRect(0, 0, 246, 192))
        live_border.setStyleSheet(Style.border_style_("live"))
        # link
        self.widget_5 = QtWidgets.QWidget(self.live)
        self.widget_5.setGeometry(QtCore.QRect(3, 5, 240, 24))
        self.widget_5.setObjectName("widget_5")
        self.label_10 = QtWidgets.QLabel(self.widget_5)
        self.label_10.setGeometry(QtCore.QRect(0, 0, 35, 24))
        self.label_10.setObjectName("label_10")
        self.link = ClickableLabel(self.widget_5)
        self.link.setGeometry(QtCore.QRect(35, 0, 200, 24))
        self.link.clicked.connect(self.open_url)
        self.link.right_clicked.connect(self.to_ws_room)
        self.link.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        # title
        self.widget_6 = QtWidgets.QWidget(self.live)
        self.widget_6.setObjectName("widget_6")
        self.widget_6.setGeometry(QtCore.QRect(3, 36, 240, 24))
        self.label_11 = QtWidgets.QLabel(self.widget_6)
        self.label_11.setGeometry(QtCore.QRect(0, 0, 35, 24))
        self.label_11.setObjectName("label_11")
        self.title_save = QtWidgets.QPushButton(self.widget_6)
        self.title_save.setGeometry(QtCore.QRect(195, 0, 40, 24))
        self.title_save.setObjectName("title_save")
        self.title_save.setCursor(QtCore.Qt.PointingHandCursor)
        self.title_save.setStyleSheet(Style.button_style('title_save'))
        self.title_save.clicked.connect(self.emit_live_title)
        self.title_save.hide()
        self.title = QtWidgets.QLineEdit(self.widget_6)
        self.title.setGeometry(QtCore.QRect(35, 2, 155, 20))
        self.title.setObjectName("title")
        # area
        self.widget_7 = QtWidgets.QWidget(self.live)
        self.widget_7.setObjectName("widget_7")
        self.widget_7.setGeometry(QtCore.QRect(3, 67, 240, 24))
        self.label_12 = QtWidgets.QLabel(self.widget_7)
        self.label_12.setGeometry(QtCore.QRect(0, 0, 35, 24))
        self.label_12.setObjectName("label_12")
        self.area_save = QtWidgets.QPushButton(self.widget_7)
        self.area_save.setGeometry(QtCore.QRect(195, 0, 40, 24))
        self.area_save.setObjectName("area_save")
        self.area_save.setStyleSheet(Style.button_style('area_save'))
        self.area_save.setCursor(QtCore.Qt.PointingHandCursor)
        self.area_save.clicked.connect(self.emit_live_area)
        self.area_save.hide()
        self.area = QtWidgets.QComboBox(self.widget_7)
        self.area.setGeometry(QtCore.QRect(35, 2, 155, 20))
        self.area.setObjectName("area")
        # status
        self.widget_8 = QtWidgets.QWidget(self.live)
        self.widget_8.setObjectName("widget_8")
        self.widget_8.setGeometry(QtCore.QRect(3, 98, 240, 24))
        self.label_14 = QtWidgets.QLabel(self.widget_8)
        self.label_14.setGeometry(QtCore.QRect(0, 0, 35, 24))
        self.label_14.setObjectName("label_14")
        self.status = QtWidgets.QPushButton(self.widget_8)
        self.status.setGeometry(QtCore.QRect(35, 0, 40, 24))
        self.status.setObjectName("status")
        self.status.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.status.setStyleSheet(Style.button_style("status", "info", "plain"))
        self.status.clicked.connect(self.toggle_live_status)
        self.status.hide()
        self.status_temp = QtWidgets.QLabel(self.widget_8)
        self.status_temp.setGeometry(QtCore.QRect(35, 0, 40, 24))
        self.status_temp.setText('未开播')
        # rtmp
        self.rtmp_widget = QtWidgets.QWidget(self.live)
        self.rtmp_widget.setObjectName("rtmp_widget")
        self.rtmp_widget.setGeometry(QtCore.QRect(3, 129, 240, 24))
        self.label_13 = QtWidgets.QLabel(self.rtmp_widget)
        self.label_13.setGeometry(QtCore.QRect(0, 0, 35, 24))
        self.label_13.setObjectName("label_13")
        self.rtmp = ClickableLabel(self.rtmp_widget)
        self.rtmp.setGeometry(QtCore.QRect(35, 0, 200, 24))
        self.rtmp.setObjectName("rtmp")
        self.rtmp.setCursor(QtCore.Qt.PointingHandCursor)
        self.rtmp.clicked.connect(self.copy_rtmp)
        self.rtmp_widget.hide()
        # code
        self.code_widget = QtWidgets.QWidget(self.live)
        self.code_widget.setObjectName("code_widget")
        self.code_widget.setGeometry(QtCore.QRect(3, 160, 240, 24))
        self.label_15 = QtWidgets.QLabel(self.code_widget)
        self.label_15.setGeometry(QtCore.QRect(0, 0, 35, 24))
        self.label_15.setObjectName("label_15")
        self.code = ClickableLabel(self.code_widget)
        self.code.setGeometry(QtCore.QRect(35, 0, 200, 24))
        self.code.setObjectName("code")
        self.code.setCursor(QtCore.Qt.PointingHandCursor)
        self.code.clicked.connect(self.copy_code)
        self.code_widget.hide()
        # space
        self.live_space_widget = QtWidgets.QWidget(self.live)
        self.live_space_widget.setFixedSize(242, 24)
        self.live_space_widget.setGeometry(QtCore.QRect(3, 129, 240, 55))
        self.live_space_widget.hide()

        """ room info """
        self.roominfo = QtWidgets.QWidget(self.centralwidget)
        self.roominfo.setGeometry(QtCore.QRect(2, 276, 246, 120))
        self.roominfo.setStyleSheet('font-family: "微软雅黑", sans-serif;')
        room_border = QtWidgets.QWidget(self.roominfo)
        room_border.setObjectName("roominfo")
        room_border.setGeometry(QtCore.QRect(0, 0, 246, 120))
        room_border.setStyleSheet(Style.border_style_("roominfo"))
        self.label_17 = QtWidgets.QLabel(self.roominfo)
        self.label_17.setGeometry(QtCore.QRect(3, 5, 45, 24))
        self.label_17.setObjectName("label_17")
        self.room = QtWidgets.QLineEdit(self.roominfo)
        self.room.setGeometry(QtCore.QRect(48, 5, 105, 24))
        self.room.setObjectName("room")
        # connect button
        self.connect = QtWidgets.QPushButton(self.roominfo)
        self.connect.setGeometry(QtCore.QRect(158, 5, 40, 24))
        self.connect.setObjectName("connect")
        self.connect.setCursor(QtCore.Qt.PointingHandCursor)
        self.connect.setStyleSheet(Style.button_style('connect'))
        self.connect.clicked.connect(self.toggle_ws_status)
        # barrage button
        self.barrage = QtWidgets.QPushButton(self.roominfo)
        self.barrage.setGeometry(QtCore.QRect(202, 5, 40, 24))
        self.barrage.setObjectName("barrage")
        self.barrage.setCursor(QtCore.Qt.PointingHandCursor)
        self.barrage.setStyleSheet(Style.button_style('barrage'))
        self.barrage.clicked.connect(self.toggle_barrage_window)
        # message area
        self.label_17_ = QtWidgets.QLabel(self.roominfo)
        self.label_17_.setGeometry(QtCore.QRect(4, 33, 60, 24))
        self.label_17_.setObjectName("label_17_")
        self.label_17_.setText("发送弹幕:")
        self.message = ChangeableTextEdit(self.roominfo)
        self.message.setGeometry(QtCore.QRect(4, 60, 180, 55))
        self.message.setObjectName("message")
        self.message.setAcceptRichText(False)
        self.message.text_changed.connect(self.message_count_watch)
        self.message.setDisabled(True)
        # message count
        self.message_count = QtWidgets.QLabel(self.roominfo)
        self.message_count.setGeometry(QtCore.QRect(185, 75, 55, 25))
        self.message_count.setAlignment(QtCore.Qt.AlignRight)
        self.message_count.setText("0/30")
        # send button
        self.send = QtWidgets.QPushButton(self.roominfo)
        self.send.setGeometry(QtCore.QRect(188, 90, 55, 25))
        self.send.setObjectName("send")
        self.send.setCursor(QtCore.Qt.PointingHandCursor)
        self.send.setStyleSheet(Style.button_style('send', 'info', 'plain'))
        self.send.setDisabled(True)
        self.send.clicked.connect(self.send_barrage)

        """ logs info """
        self.widget_4 = QtWidgets.QWidget(self.centralwidget)
        self.widget_4.setGeometry(QtCore.QRect(250, 2, 248, 396))
        self.widget_4.setObjectName("widget_4")
        self.label = QtWidgets.QLabel(self.widget_4)
        self.label.setGeometry(QtCore.QRect(0, 0, 250, 24))
        self.label.setStyleSheet('padding: 0px 6px;line-height: 24px;font-family: "微软雅黑", sans-serif;')
        self.label.setObjectName("label")
        self.scrollArea = QtWidgets.QScrollArea(self.widget_4)
        self.scrollArea.setGeometry(QtCore.QRect(4, 26, 242, 368))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        # logs
        self.logs = QtWidgets.QLabel()
        # self.logs.setGeometry(QtCore.QRect(80, 170, 54, 12))
        self.logs.setObjectName("logs")
        self.logs.setAlignment(QtCore.Qt.AlignTop)
        self.logs.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)
        self.logs.setCursor(QtCore.Qt.IBeamCursor)
        self.logs.setStyleSheet('#logs{padding: 0px 3px 0px 3px;font-family: "微软雅黑", sans-serif;}')
        self.scrollArea.setWidget(self.logs)
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollArea.setStyleSheet(Style.scroll_bar_style('border: 1px;border-style:solid;border-color: #828790;'))
        main_window.setCentralWidget(self.centralwidget)

        self.retranslateUi(main_window)
        QtCore.QMetaObject.connectSlotsByName(main_window)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Bilive Manager [未开播]"))
        self.user_name.setText(_translate("MainWindow", "UserName"))
        self.level.setText(_translate("MainWindow", "Level ?"))
        self.level.setStyleSheet(Style.level_style_(0))
        self.label_6.setText(_translate("MainWindow", "关注:"))
        self.follow.setText(_translate("MainWindow", "?"))
        self.label_8.setText(_translate("MainWindow", "粉丝:"))
        self.fans.setText(_translate("MainWindow", "?"))
        self.setting.setText(_translate("MainWindow", "配置"))
        self.refresh.setText(_translate("MainWindow", "刷新"))
        self.label_10.setText(_translate("MainWindow", "地址:"))
        self.link.setText(_translate("MainWindow", "<u>https://live.bilibili.com/?</u>"))
        self.label_11.setText(_translate("MainWindow", "标题:"))
        self.title_save.setText(_translate("MainWindow", "保存"))
        self.label_12.setText(_translate("MainWindow", "区域:"))
        self.area_save.setText(_translate("MainWindow", "保存"))
        self.label_14.setText(_translate("MainWindow", "状态:"))
        self.status.setText(_translate("MainWindow", "开播"))
        self.label_13.setText(_translate("MainWindow", "rtmp:"))
        self.label_15.setText(_translate("MainWindow", "code:"))
        self.label_17.setText(_translate("MainWindow", "房间号:"))
        self.connect.setText(_translate("MainWindow", "连接"))
        self.barrage.setText(_translate("MainWindow", "弹幕"))
        self.send.setText(_translate("MainWindow", "发送"))
        self.label.setText(_translate("MainWindow", "日志:"))

    # 切换窗口标题和图标
    def toggle_window_status(self, status):
        pixMap = QtGui.QPixmap()
        pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.icon if status == 1 else icon.icon_stop))
        self.main_window.setWindowIcon(QtGui.QIcon(pixMap))
        self.main_window.setWindowTitle('Bilive Manager [直播中]' if status == 1 else 'Bilive Manager [未开播]')

    # 切换ws状态
    def toggle_ws_status(self):
        if self.room.text() == '':
            return
        if self.ws_status == 1:
            self.bili_ws_close()
        else:
            self.bili_ws_open()

    # 打开ws连接
    def bili_ws_open(self):
        self.print_log('正在获取 {} 的真实直播间Id'.format(self.room.text()))
        self._signal_get_real_room_id.emit(self.room.text(), self.cookie)

    # 获取真实房间回调
    def call_real_room_id(self, room_info):
        if room_info.get('err', '') == '':
            room_id = room_info['real_room_id']
            if room_id != 0:
                self.print_log('已获取 {} 的真实直播间: {}({})'.format(self.room.text(), room_info.get('uname', ''), room_id))
                self.room.setText(str(room_id))
                self._signal_get_last_barrage.emit(str(room_id))
                self._signal_bili_ws_connect.emit(str(room_id))
                self._signal_update_sys_tray_ws_connect.emit(1)
                self._signal_bili_ws_update.emit(room_info)
                self.message.setDisabled(False)
                self.send.setDisabled(False)
            else:
                self.print_log('房间 {} 不存在'.format(self.room.text()), True)
        else:
            self.print_log('获取真实房间id失败:{}'.format(room_info.get('err', '')), True)

    # 关闭ws连接
    def bili_ws_close(self):
        if not self.thread.isRunning():
            self.thread.start()
        self._signal_bili_ws_disconnect.emit()
        self.message.setDisabled(True)
        self.send.setDisabled(True)
        self._signal_update_sys_tray_ws_connect.emit(0)

    # ws信息回调 -- 开启
    def call_bili_ws_open(self, msg):
        self.print_log(msg)
        self.ws_status = 1
        self.connect.setText("断开")
        self.connect.setStyleSheet(Style.button_style('connect', 'danger'))
        self.room.setReadOnly(True)

    # ws信息回调 -- 关闭
    def call_bili_ws_close(self, msg):
        self.print_log(msg)
        self.ws_status = 0
        self.connect.setText("连接")
        self.connect.setStyleSheet(Style.button_style('connect'))
        self.room.setReadOnly(False)
        self._signal_bili_ws_close.emit()

    # ws信息回调 -- 加入
    def call_bili_ws_join(self, msg):
        self._signal_bili_ws_join.emit(msg)

    # ws信息回调 -- 人气
    def call_bili_ws_pop(self, count):
        self._signal_bili_ws_pop.emit(count)

    # ws信息回调 -- 礼物
    def call_bili_ws_gift(self, obj):
        self._signal_bili_ws_gift.emit(obj)

    # ws信息回调 -- 弹幕
    def call_bili_ws_receive(self, obj):
        self._signal_bili_ws_receive.emit(obj)

    # 发送弹幕回调
    def call_send_barrage_msg(self, obj):
        if obj.get('err', None):
            self.print_log(obj.get('err'))

    def call_get_last_barrage(self, obj):
        if obj.get('err', None):
            self.print_log(obj.get('err'))
        else:
            message = obj.get('message', [])
            for elem in message:
                self._signal_bili_ws_receive.emit(elem)

    # 发送弹幕字数监听
    def message_count_watch(self, count):
        self.message_count.setText("{}/30".format(count))
        self.message_count.setStyleSheet("color: {}".format("red" if count > 30 else "black"))

    # 复制rtmp到剪贴板
    def copy_rtmp(self):
        clipboard = QtGui.QGuiApplication.clipboard()
        rtmp = self.live_rtmp.get('rtmp', '')
        clipboard.setText(rtmp)
        self.print_log('已复制rtmp到剪贴板'.format(rtmp))

    # 复制code到剪贴板
    def copy_code(self):
        clipboard = QtGui.QGuiApplication.clipboard()
        code = self.live_rtmp.get('code', '')
        clipboard.setText(code)
        self.print_log('已复制code到剪贴板'.format(code))

    # 点击房间链接从浏览器打开
    def open_url(self):
        if self.room_id != 0:
            webbrowser.open('https://live.bilibili.com/{}'.format(self.room_id))

    # 右键点击房间链接复制到ws直播间号
    def to_ws_room(self):
        if self.room_id != 0 and not self.room.isReadOnly():
            self.room.setText(str(self.room_id))

    # 获取当前直播区域
    def get_current_area_id(self):
        index = self.area.currentIndex()
        return int(list(self.live_area.keys())[index])

    # 设置当前直播区域
    def set_current_area_id(self, area_id):
        self.area_id = area_id
        index = 0
        try:
            index = list(self.live_area.keys()).index(str(area_id))
        except ValueError as e:
            index = 0
        self.area.setCurrentIndex(index)

    # 初始化直播区域
    def init_live_area(self, live_area):
        self.print_log('初始化直播区域')
        if live_area.get("err", "") != "":
            self.print_log(live_area.get("err"), True)
            return
        self.live_area = live_area
        self.area.clear()
        for elem in self.live_area.values():
            self.area.addItem(elem)

    # 更新用户信息
    def update_user_info(self, user):
        self.print_log('加载用户信息')
        if user.get("err", None):
            self.print_log(user.get("err"), True)
            return
        self.user_name.setText(user.get("user_name", 'user_name'))
        self.level.setText("Level {}".format(user.get("level", '?')))
        self.level.setStyleSheet(Style.level_style_(user.get("level", 0)))
        content = user.get('face', None)
        if content is None:
            pixMap = QtGui.QPixmap()
            pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.no_face))
            self.avatar.setup_image(size_=72, img_=pixMap.scaled(72, 72))
        else:
            img = QtGui.QImage.fromData(content)
            avatar = QtGui.QPixmap.fromImage(img)
            self.avatar.setup_image(size_=72, img_=avatar.scaled(72, 72, transformMode=QtCore.Qt.SmoothTransformation))

    # 更新用户粉丝数
    def update_user_stat(self, stat):
        self.follow.setText(change_stat_num(stat.get("following", '?')))
        self.fans.setText(change_stat_num(stat.get("follower", '?')))

    # 更新直播信息
    def update_live_info(self, live):
        self.print_log('加载直播间信息')
        if live.get("err", "") != "":
            self.print_log(live.get("err"), True)
            return
        self.room_id = live.get('room_id', 0)
        self.link.setText('<a href="https://live.bilibili.com/{}"><u>https://live.bilibili.com/{}</u></a>'.format(
            self.room_id, self.room_id) if self.room_id != 0 else '<u>https://live.bilibili.com/?</u>')
        self.live_title = live.get("title", "")
        self.title.setText(live.get("title", ""))
        self.set_current_area_id(live.get('area_id', 0))
        if self.room_id != 0:
            self.title_save.show()
            self.area_save.show()
            self.status.show()
            self.status_temp.hide()
            if self.room.text() == '':
                self.room.setText(str(self.room_id))
        else:
            self.title_save.hide()
            self.area_save.hide()
            self.status.hide()
            self.status_temp.show()
        self.update_live_status(live.get('status', 0), True)

    # 直播标题更新
    def emit_live_title(self):
        title = self.title.text()
        if title != '':
            self.print_log("更新直播标题:{}".format(title))
            self._signal_update_live_title.emit(self.room_id, title, self.token, self.cookie)

    # 直播标题更新回调
    def call_live_title(self, flag):
        if flag.get("err", None):
            self.print_log(flag.get("err"), True)
            return
        self.print_log("更新直播标题{}".format("成功" if flag else "失败"))
        if flag:
            self.live_title = self.title.text()
        else:
            self.title.setText(self.live_title)

    # 直播区域更新
    def emit_live_area(self):
        area_id = int(self.get_current_area_id())
        self.print_log("更新直播区域:{}".format(self.area.currentText()))
        self._signal_update_live_area.emit(self.room_id, area_id, self.token, self.cookie)

    # 直播区域更新回调
    def call_live_area(self, flag):
        if flag.get("err", None):
            self.print_log(flag.get("err"), True)
            return
        self.print_log("更新直播区域{}".format("成功" if flag else "失败"))
        if flag:
            self.area_id = self.get_current_area_id()
        else:
            self.set_current_area_id(self.area_id)

    # 直播状态更新(开播/下播)
    def toggle_live_status(self):
        self.print_log('{}播中...'.format('下' if self.live_status == 1 else '开'))
        self._signal_update_live_status.emit(self.room_id, self.live_status, self.area_id, self.token, self.cookie)

    # 直播状态更新回调
    def call_live_status(self, flag):
        if type(flag) != bool and flag.get("err", None):
            self.print_log(flag.get("err"), True)
            return
        self.update_live_status(abs(self.live_status - 1) if flag else self.live_status)

    # 发送弹幕信息
    def send_barrage(self):
        message = self.message.toPlainText()
        room = self.room.text()
        if message == '' or room == '':
            return
        if len(message) > 30:
            self.print_log('弹幕信息太长,无法发送')
            return
        self._signal_send_bili_barrage.emit(message, room, self.token, self.cookie)
        self.message.setText("")

    # 更新直播状态
    def update_live_status(self, status, is_init=False):
        if not is_init and status == self.live_status:
            return
        self.print_log('更新直播状态')
        self.live_status = status
        is_live = status == 0
        self.status.setText('开播' if is_live else '下播')
        self.status.setStyleSheet(Style.button_style('status', 'info' if is_live else 'danger', 'plain'))
        if is_live:
            self.rtmp_widget.hide()
            self.code_widget.hide()
            self.live_space_widget.show()

        else:
            self.rtmp_widget.show()
            self.code_widget.show()
            self.live_space_widget.hide()
            self._signal_get_live_rtmp.emit(self.room_id, self.cookie)
        self.toggle_window_status(status)
        self._signal_update_sys_tray_live_status.emit(self.live_status)

    # 更新直播码
    def update_live_rtmp(self, live_rtmp):
        self.print_log('更新直播码')
        if live_rtmp.get("err", "") != "":
            self.print_log(live_rtmp.get("err"), True)
            return
        self.live_rtmp = live_rtmp
        self.rtmp.setText('<u>{}</u>'.format(self.live_rtmp.get('rtmp', '')))
        self.code.setText('<u>{}</u>'.format(self.live_rtmp.get('code', '')))

    # 刷新信息
    def refresh_info(self):
        if not self.thread.isRunning():
            self.thread.start()
        if len(self.live_area.keys()) == 0:
            self._signal_get_live_area.emit()
        self._signal_get_user_info.emit(self.uid, self.cookie)
        self._signal_get_user_stat.emit(self.uid, self.cookie)
        self._signal_get_live_info.emit(self.cookie)

    # 初始化信息
    def init_info(self):
        self.thread.start()
        self._signal_get_live_area.emit()
        self.refresh_info()

    # 打印日志
    def print_log(self, message, is_err=False):
        str_ = '[Error] {}<br>' if is_err else '[Info] {}<br>'
        print(message)
        if self.logs is None:
            self.log_msg.append(message)
        else:
            scroll_bar = self.scrollArea.verticalScrollBar()
            is_on_bottom = scroll_bar.value() == scroll_bar.maximum()
            if len(self.log_msg) != 0:
                for elem in self.log_msg:
                    self.logs.setText(self.logs.text() + str_.format(elem))
                self.log_msg = []
            len_ = message.__len__()
            max_len = 17
            if len_ >= max_len:
                for i in range(math.ceil(len_ / max_len)):
                    if i > 0:
                        str_ = '{}<br>'
                    self.logs.setText(self.logs.text() + str_.format(message[i * max_len:(i + 1) * max_len]))
            else:
                self.logs.setText(self.logs.text() + str_.format(message))
            count = len(self.logs.text().split('<br>'))
            self.logs.setFixedSize(230, (count - 1) * max_len + 6)
            if (count - 1) * max_len > 362:
                scroll_bar = self.scrollArea.verticalScrollBar()
                if is_on_bottom:
                    scroll_bar.setValue(scroll_bar.maximum())

    # 打开配置窗口
    def open_setting_window(self):
        self._signal_open_setting_window.emit(self.uid, self.token, self.cookie)

    # 打开弹幕
    def toggle_barrage_window(self):
        self._signal_toggle_barrage_window.emit()

    # 配置窗口回调
    def call_setting(self, uid, token, cookie):
        self.uid = uid
        self.token = token
        self.cookie = cookie
        cf = RawConfigParser()
        cf.read('config.ini', encoding='gbk')
        cf.set("user_info", "uid", self.uid)
        cf.set("user_info", "token", self.token)
        cf.set("user_info", "cookie", self.cookie)
        with open("config.ini", "w+") as f:
            cf.write(f)
        self.refresh_info()

    def toggle_window_visible(self):
        if self.main_window.isVisible():
            self.main_window.hide()
        else:
            self.show_main_window()

    def show_main_window(self):
        self.main_window.showNormal()
        self.main_window.activateWindow()

    def toggle_minimized(self, status):
        self.minimized = status

    def toggle_main_minimized(self):
        if self.minimized == 1:
            self.main_window.hide()
