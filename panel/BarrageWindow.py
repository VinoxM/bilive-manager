# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'BarrageWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import math
import webbrowser

from PyQt5 import QtCore, QtGui, QtWidgets

from api.apiThread import RunThread
from components import Style
from components.DraggableWidget import DraggableWidget, DraggableLabel
import icon
from components.ClickableLabel import ClickableLabel
from components.AvatarLabel import AvatarLabel
from components.ScrollArea import ScrollArea


class UiBarrageWindow(QtWidgets.QWidget):
    _signal_get_user_detail = QtCore.pyqtSignal(int)
    _signal_update_barrage_visible = QtCore.pyqtSignal(int)

    def __init__(self):
        super(UiBarrageWindow, self).__init__()
        self.uid = 0
        self.window = None
        self.width_ = 400
        self.height_ = 900
        self.live_link = None
        self.on_top = True
        # get user detail
        self.thread = QtCore.QThread(self)
        self.thread_get_user_detail = RunThread('get_user_detail')
        self.thread_get_user_detail.moveToThread(self.thread)
        self._signal_get_user_detail.connect(self.thread_get_user_detail.run)
        self.thread_get_user_detail.signal.connect(self.call_get_user_detail)

    def setupUi(self, window):
        self.window = window
        self.window.closed.connect(self._toggle)
        window.setObjectName("window")
        window.setFixedSize(self.width_, self.height_)
        window.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.Tool | QtCore.Qt.WindowStaysOnTopHint)
        window.setAttribute(QtCore.Qt.WA_TranslucentBackground, True)
        pixMap = QtGui.QPixmap()
        pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.disconnected))
        window.setWindowIcon(QtGui.QIcon(pixMap))
        window.setWindowTitle('弹幕姬 [未连接]')

        # Window Frame
        self.widget = QtWidgets.QWidget(window)
        self.widget.setGeometry(QtCore.QRect(0, 0, self.width_, 40))
        self.widget.setObjectName("widget")
        self.widget.setStyleSheet("#widget{background-color: rgba(0,0,0,0.4);}")

        # Drag Handler
        self.drag = DraggableWidget(self.widget)
        self.drag.setGeometry(QtCore.QRect(0, 0, 370, 40))
        self.drag.drag_move.connect(self.drag_move)
        # Close Button
        self.close_btn = ClickableLabel(self.widget)
        self.close_btn.setGeometry(QtCore.QRect(370, 10, 20, 20))
        self.close_btn.setText('✕')
        self.close_btn.setAlignment(QtCore.Qt.AlignCenter)
        self.close_btn.setCursor(QtCore.Qt.PointingHandCursor)
        self.close_btn.setObjectName('close-btn')
        self.close_btn.setStyleSheet("#close-btn{color:white ;font-size: 16px;}#close-btn:hover{color: #13A4DF}")
        self.close_btn.clicked.connect(self.window.close)
        # Avatar
        self.avatar = AvatarLabel(self.widget)
        self.avatar.setGeometry(QtCore.QRect(2, 2, 36, 36))
        pixMap = QtGui.QPixmap()
        pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.no_face))
        self.avatar.setup_image(size_=36, img_=pixMap.scaled(36, 36))
        self.avatar.clicked.connect(self.open_url)
        self.avatar.setCursor(QtCore.Qt.PointingHandCursor)
        # Status
        self.status = QtWidgets.QLabel(self.widget)
        self.status.setGeometry(QtCore.QRect(40, 13, 14, 14))
        self.status.setAlignment(QtCore.Qt.AlignCenter)
        self.status.setObjectName('status')
        self.status.setText('●')
        self.status.setStyleSheet("color: red")
        # Title
        self.title = DraggableLabel(self.widget)
        self.title.drag_move.connect(self.drag_move)
        self.title.setGeometry(QtCore.QRect(50, 5, 220, 30))
        self.title.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.title.setObjectName('title')
        self.title.setStyleSheet("#title{font-size: 12px; color: white;font-weight: bold; padding-left: 5px}")
        # Pop
        self.popular_icon = AvatarLabel(self.widget)
        self.popular_icon.setGeometry(QtCore.QRect(274, 12, 16, 16))
        pixMap = QtGui.QPixmap()
        pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.hot))
        self.popular_icon.setup_image(16, pixMap.scaled(16, 16))
        self.pop = QtWidgets.QLabel(self.widget)
        self.pop.setGeometry(QtCore.QRect(285, 5, 60, 30))
        self.pop.setObjectName('pop')
        self.pop.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignVCenter)
        self.pop.setStyleSheet('#pop{font-size:12px; color: white; padding: 5px 0px;font-family: "微软雅黑", sans-serif;}')
        self.pop.setToolTip("人气")
        self.pop.setText("0")
        # On Top
        self.top = AvatarLabel(self.widget)
        self.top.setGeometry(QtCore.QRect(345, 10, 20, 20))
        pixMap = QtGui.QPixmap()
        pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.top))
        self.top.setup_image(20, pixMap.scaled(20, 20))
        self.top.clicked.connect(self.toggle_top)
        self.top.setCursor(QtCore.Qt.PointingHandCursor)

        self.barrage_area = ScrollArea(window)  # QtWidgets.QScrollArea(window)
        self.barrage_area.setProperties(item_max_width=380, max_height=680, max_count=100, auto_remove=True,
                                        item_style_sheet='color: white;font-size:12px;'
                                                         'font-family: "微软雅黑", sans-serif;'
                                                         'line-height: 20px;padding: 3px 0px;')
        self.barrage_area.setGeometry(QtCore.QRect(0, 40, 400, 700))
        self.barrage_area.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.barrage_area.setStyleSheet(Style.scroll_bar_style('border: 0px;background-color: rgba(0,0,0,0.5);'))

        self.split_ = QtWidgets.QWidget(window)
        self.split_.setGeometry(QtCore.QRect(0, 740, 400, 20))
        self.split_.setObjectName("split")
        self.split_.setStyleSheet("#split{background-color: rgba(0,0,0,0.6);}")

        self.gift_label = ClickableLabel(self.split_)
        self.gift_label.setObjectName('gift-label')
        self.gift_label.setText('<span style="color: white">礼物信息</span>')
        self.gift_label.setStyleSheet('#gift-label{font-family: "微软雅黑", sans-serif;}')
        self.gift_label.clicked.connect(self.show_gift)
        self.gift_label.setCursor(QtCore.Qt.PointingHandCursor)
        self.gift_label.setGeometry(QtCore.QRect(110, 0, 60, 20))
        self.gift_label.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.gift_label.setAlignment(QtCore.Qt.AlignCenter)

        self.join_label = ClickableLabel(self.split_)
        self.join_label.setObjectName('join-label')
        self.join_label.setText('<span style="color: #0ebeff"><u>进场信息</u></span>')
        self.join_label.setStyleSheet('#join-label{font-family: "微软雅黑", sans-serif;}')
        self.join_label.clicked.connect(self.show_join)
        self.join_label.setCursor(QtCore.Qt.PointingHandCursor)
        self.join_label.setGeometry(QtCore.QRect(230, 0, 60, 20))
        self.join_label.setAttribute(QtCore.Qt.WA_TranslucentBackground)
        self.join_label.setAlignment(QtCore.Qt.AlignCenter)

        self.gift_area = ScrollArea(window)
        self.gift_area.setStyleSheet(Style.scroll_bar_style('border: 0px;background-color: rgba(0,0,0,0.5);'))
        self.gift_area.setProperties(item_max_width=380, max_height=130, max_count=40, auto_remove=True,
                                     item_style_sheet='color: white;font-size:12px;'
                                                      'font-family: "微软雅黑", sans-serif;'
                                                      'line-height: 20px;padding: 3px 0px;')
        self.gift_area.setGeometry(QtCore.QRect(0, 760, 400, 140))
        self.gift_area.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)

        self.join_area = ScrollArea(window)
        self.join_area.setStyleSheet(Style.scroll_bar_style('border: 0px;background-color: rgba(0,0,0,0.5);'))
        self.join_area.setProperties(item_max_width=380, max_height=130, max_count=40, auto_remove=True,
                                     item_style_sheet='color: white;font-size:12px;'
                                                      'font-family: "微软雅黑", sans-serif;'
                                                      'line-height: 20px;padding: 3px 0px;')
        self.join_area.setGeometry(QtCore.QRect(0, 760, 400, 140))
        self.join_area.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.join_area.hide()

        QtCore.QMetaObject.connectSlotsByName(window)

    # 切换标题和图标
    def toggle_barrage_status(self, status):
        pixMap = QtGui.QPixmap()
        pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.connected if status == 1 else icon.disconnected))
        self.window.setWindowIcon(QtGui.QIcon(pixMap))
        self.window.setWindowTitle('弹幕姬 [已连接]' if status == 1 else '弹幕姬 [未连接]')

    # 切换显示状态
    def _toggle(self):
        if self.window.isVisible():
            self.window.close()
            self._signal_update_barrage_visible.emit(0)
        else:
            self.window.show()
            self.window.activateWindow()
            self._signal_update_barrage_visible.emit(1)

    # 拖动
    def drag_move(self, x, y):
        desktop = QtWidgets.QApplication.desktop()
        width = desktop.width()
        height = desktop.height()
        if x < 0:
            x = 0
        elif x > width - self.width_:
            x = width - self.width_
        if y < 0:
            y = 0
        elif y > height - self.height_:
            y = height - self.height_
        self.window.move(x, y)

    # 弹幕信息
    def add_barrage(self, dm_info):
        uid = dm_info['uid']
        uname = dm_info['uname']
        message = dm_info['msg']
        is_host = uid == self.uid
        str_ = '' if not is_host else '<span style="color: white;">主 </span>'
        str_ += '<span style="font-weight: bold;color: #ADBCD9">{}: </span><span style="color:white;">'.format(uname)
        self.barrage_area.add_item(str_ + message)

    def add_join(self, obj):
        uname = obj['uname']
        is_welcome = obj['welcome']
        message = '{} 用户 <span style="font-weight: bold;color: #ADBCD9">{}</span> 进入直播间'.format(
            '' if not is_welcome else '欢迎', uname)
        self.join_area.add_item(message)

    # 礼物信息
    def add_gift(self, obj):
        uname = obj['uname']
        action_ = obj['action']
        num_ = obj['num']
        gift_name = obj['gift_name']
        message = '<span style="font-weight: bold;color: #ADBCD9">{}</span> ' \
                  '{} 了 {} 个 <span style="font-weight: bold;color: #ADBCD9">' \
                  '{}</span>'.format(uname, action_, num_, gift_name)
        self.gift_area.add_item(message)

    # 获取用户详情回调
    def call_get_user_detail(self, obj):
        if obj.get('err', '') == '':
            face = obj.get('face', None)
            self.live_link = obj.get('link')
            if face is None:
                pixMap = QtGui.QPixmap()
                pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.no_face))
                self.avatar.setup_image(size_=36, img_=pixMap.scaled(36, 36))
            else:
                img = QtGui.QImage.fromData(face)
                avatar = QtGui.QPixmap.fromImage(img)
                self.avatar.setup_image(size_=36,
                                        img_=avatar.scaled(36, 36, transformMode=QtCore.Qt.SmoothTransformation))
            self.avatar.setToolTip(obj.get('uname', ''))

    # 更新直播信息
    def update_live_info(self, obj):
        self.init_all_message()
        title = obj.get('title', '')
        status = obj.get('status', '')
        self.status.setStyleSheet("color: {}".format("#59A869" if status == 1 else "#F0F0F0"))
        uid = obj.get('uid', 0)
        self.uid = uid
        self.title.setText(title)
        if not self.thread.isRunning():
            self.thread.start()
        self._signal_get_user_detail.emit(uid)
        self.toggle_barrage_status(1)

    def live_start(self):
        self.status.setStyleSheet("color: {}".format("#59A869"))

    def live_stop(self):
        self.status.setStyleSheet("color: {}".format("#F0F0F0"))

    # 更新直播人气
    def update_heartbeat(self, num_):
        str_ = str(num_)
        if num_ > 10000:
            str_ = str(round(num_ / 10000, 1)) + '万'
        self.pop.setText(str_)
        self.pop.setToolTip(str(num_))

    # 显示礼物面板
    def show_gift(self):
        self.gift_label.setText('<span style="color: white">礼物信息</span>')
        self.join_label.setText('<span style="color: #0ebeff"><u>进场信息</u></span>')
        self.gift_area.show()
        scroll_bar = self.gift_area.verticalScrollBar()
        scroll_bar.setValue(scroll_bar.maximum())
        self.join_area.hide()

    # 显示入场面板
    def show_join(self):
        self.gift_label.setText('<span style="color: #0ebeff"><u>礼物信息</u></span>')
        self.join_label.setText('<span style="color: white">进场信息</span>')
        self.gift_area.hide()
        self.join_area.show()
        scroll_bar = self.join_area.verticalScrollBar()
        scroll_bar.setValue(scroll_bar.maximum())

    # 初始化信息
    def init_all_message(self):
        self.live_link = None
        self.barrage_area.clear_items()
        self.gift_area.clear_items()
        self.join_area.clear_items()

    # 点击头像打开直播间
    def open_url(self):
        if self.live_link:
            webbrowser.open(self.live_link)

    # ws 关闭
    def ws_closed(self):
        self.status.setStyleSheet("color: red")
        self.toggle_barrage_status(0)

    # 切换是否置顶
    def toggle_top(self):
        pixMap = QtGui.QPixmap()
        pixMap.loadFromData(QtCore.QByteArray.fromBase64(icon.on_top if self.on_top else icon.top))
        self.top.setup_image(20, pixMap.scaled(20, 20))
        self.on_top = False if self.on_top else True
        if self.on_top:
            self.window.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.Tool | QtCore.Qt.WindowStaysOnTopHint)
        else:
            self.window.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.window.show()
        self.window.activateWindow()
